#!/usr/bin/env python
#  -*- coding: utf-8 -*-
# *****************************************************************************
# NICOS, the Networked Instrument Control System of the MLZ
# Copyright (c) 2009-2021 by the NICOS contributors (see AUTHORS)
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Module authors:
#   Enrico Faulhaber <enrico.faulhaber@frm2.tum.de>
#
# *****************************************************************************

"""Script to plot and fit NICOS data files."""

import sys
from os import path

from numpy import argsort, array, concatenate, diagonal, exp, linspace, log, \
    log10, ndarray, pi, piecewise, sqrt

try:
    import GracePlot
except ImportError:
    print('please install GracePlot, plotting won\'t work...')
    sys.exit()

sys.path.insert(0, path.dirname(path.dirname(path.realpath(__file__))))

try:
    from scipy.optimize import curve_fit
except ImportError:
    print('please install scipy, fitting won\'t work...')


def getguess(xs, ys, func):
    if func in [gausswlorentz, twogauss]:
        guess = [0, 0, 0, 0, 0, 0]
    else:
        guess = [0, 0, 0, 0]

    centerindex = ys.argmax()
    guess[0] = xs[centerindex]       # center
    guess[1] = ys[centerindex]       # amplitude
    guess[3] = max(ys.min() - 1, 0)  # background

    overhalf = xs[ys > guess[1]/2.]
    guess[2] = abs((overhalf[0] - overhalf[-1]) / 1.8) or 0.1

    if func is gausswlorentz:
        guess[5] = guess[3]     # background
        guess[3] = guess[2]     # gauss width
        guess[4] = 3*guess[2]   # lorentz width
        guess[2] = guess[1]/10  # lorentz amplitude
    elif func is twogauss:
        guess[5] = guess[1]*0.9       # amplitude #2
        guess[4] = guess[0]+guess[2]  # center #2
        guess[0] = guess[0]-guess[2]  # center #1
        guess[2] /= 2.0               # width

    return guess


def gausswlorentz(xs, center, ampg, ampl, widthg, widthl, back):
    """Two peaks centered at the same pos: Lorentzian and Gaussian."""
    gauss = ampg * exp(-0.5 * (xs - center)**2/widthg**2)
    lorentz = ampl / (1 + (xs - center)**2/widthl**2)
    bose = 1.0 / (1 - exp(-xs * 11.605/1.37))
    return back + gauss + \
        piecewise(xs, [xs < 0, xs == 0, xs > 0],
                  [lorentz/(bose + 1), lorentz, lorentz/bose])


gausswlorentz.params = ['center', 'amplitudeGauss', 'amplitudeLorentz',
                        'widthGauss', 'widthLorentz', 'background']


def lorentz(xs, center, amp, width, back):
    """Lorentzian peak function."""
    return back + amp / (1 + (xs - center)**2/width**2)


lorentz.params = ['center', 'amplitude', 'width', 'background']


def gauss(xs, center, amp, width, back):
    """Gauss peak function."""
    return back + amp * exp(-0.5 * (xs-center)**2 / (width/(2*sqrt(2*log(2))))**2)


gauss.params = ['center', 'amplitude', 'width', 'background']


def twogauss(xs, center1, amp1, width1, back, center2, amp2):
    """Two gauss peaks function with the same width."""
    gauss1 = amp1 * exp(-0.5 * (xs - center1)**2 / width1**2)
    gauss2 = amp2 * exp(-0.5 * (xs - center2)**2 / width1**2)
    return back + gauss1 + gauss2


twogauss.params = ['center1', 'amplitude1', 'width1', 'background',
                   'center2', 'amplitude2']

fitfunlist = {
    'gauss': gauss,
    'g': gauss,
    'lorentz': lorentz,
    'l': lorentz,
    'gwl': gausswlorentz,
    'gaussgauss': twogauss,
    'gg': twogauss,
}

colormap = {0: 1,  1: 2,  2: 3,  3: 4,   4: 6,   5: 8, 6: 9,
            7: 10, 8: 11, 9: 12, 10: 13, 11: 14, 12: 15}


def plotcurve(grpl, xs, ys, dys, cnum, legend, fitflag=False, ff=gauss):
    grpl('s%1d on' % cnum)
    grpl('s%1d symbol %1d' % (cnum, cnum + 1))
    grpl('s%1d symbol size 0.3' % cnum)
    grpl('s%1d symbol fill pattern 1' % cnum)
    # avoid color #5 (yellow) and #7 (light grey)
    colornum = colormap[cnum]
    grpl('s%1d symbol fill color %1d' % (cnum, colornum))
    grpl('s%1d symbol color %1d' % (cnum, colornum))
    grpl('s%1d line color %1d' % (cnum, colornum))
    grpl('s%1d errorbar color %1d' % (cnum, colornum))
    grpl('g0.s%1d type xydydy' % cnum)
    grpl('s%1d line type 0' % cnum)
    i = 0
    for point in zip(xs, ys, dys):
        x, y, dy = point
        dy1 = dy2 = dy
        if cascade is not None:
            y += cnum * cascade
        if logflag:
            if y <= 0:
                continue
            if y - dy <= 0:
                dy1 = 0
            else:
                dy1 = abs(log10(y - dy) - log10(y))
            dy2 = abs(log10(y + dy) - log10(y))
            y = log10(y)
        if ymin is not None and y < ymin:
            continue
        if ymax is not None and y > ymax:
            continue
        if xmin is not None and x < xmin:
            continue
        if xmax is not None and x > xmax:
            continue
        grpl('g0.s%1d point %g,%g' % (cnum, x, y))
        grpl('g0.s%1d.y1[%d] = %g' % (cnum, i, dy1))
        grpl('g0.s%1d.y2[%d] = %g' % (cnum, i, dy2))
        i += 1
    grpl('g0.s%1d legend "%s"' % (cnum, legend))

    if fitflag:
        guess = getguess(xs, ys, ff)
        try:
            ndf = len(xs) - len(guess)
            if dys is not None and dys.min() > 0:
                # pylint: disable=unbalanced-tuple-unpacking
                ps, pcov = curve_fit(ff, xs, ys, guess, dys)
                chi2 = (((ys - ff(xs, *ps)) / dys)**2).sum() / ndf
            else:
                ps, pcov = curve_fit(ff, xs, ys, guess)[0], None
                chi2 = ((ys - ff(xs, *ps))**2).sum() / ndf
        except RuntimeError as err:
            print(err)
            return
        if isinstance(pcov, ndarray):
            dps = sqrt(diagonal(pcov))
        else:
            dps = [0] * len(ps)
        print(' result of least squares fit:')
        print(' function %s' % ff.__name__)
        print(' reduced chisqr %.3f' % chi2)
        print('_____parameters______fitted value____estimated error')
        for i in range(len(ps)):
            if i == len(ps) - 1:
                fill = '_'
            else:
                fill = ' '
            print('%20s%12.4f\t%7.4f' % (ff.params[i].center(20, fill),
                                         ps[i], dps[i]))
        if ff is gauss:
            print('       area         %12.3f' % abs(ps[1] / sqrt(2 * pi) /
                                                     ps[2]))

        grpl('s1%1d on' % cnum)
        grpl('s1%1d symbol 0' % cnum)
        grpl('g0.s1%1d type xy' % cnum)
        grpl('s1%1d line type 1' % cnum)
        grpl('s1%1d line color %1d' % (cnum, colornum))
        # XXX fix wrong area calculation
        outstring = 'Ctr: %6.4f, Amp.: %6.3f, FWHM: %6.4f, Area %6.3f' % (
            ps[0], ps[1], ps[2], ps[1] / sqrt(2 * pi) / (ps[2] / 2.3548))
        grpl('g0.s1%1d legend "%s"' % (cnum, outstring))
        fxs = linspace(xs[0], xs[-1], 101)
        for x, y in zip(fxs, ff(fxs, *ps)):
            if logflag:
                y = log10(y)
            if cascade is not None:
                y += cnum * cascade
            grpl('g0.s1%1d point %g,%g' % (cnum, x, y))


def prepareplot(grpl, title, subtitle, xaxis, yaxis):
    """Prepare axis and titles for a new plot."""
    grpl('with g0;subtitle "%s"' % subtitle)
    grpl('with g0;title "%s"' % title)
    grpl('with g0;xaxis label "%s"' % xaxis)
    grpl('with g0;yaxis label "%s"' % yaxis)
    grpl('with g0;legend 0.15,0.85')
    grpl('with g0;legend on')


def try_float(x):
    try:
        return float(x)
    except ValueError:
        return 0


# pylint: disable=too-many-branches,too-many-statements
def getdatafromfile(filename, fileprefix, xcol=None, ycol=None,
                    normalize=False, mcorr=False, xcolhint=None, **kwargs):
    """Read NICOS data file."""
    for fpath in [filename,
                  '/data/exp/current/data/' + filename,
                  '/data/exp/%s/data/%s' % (fileprefix, filename),
                  '/data/current/data/' + filename,
                  '/data/2012/%s/data/%s' % (fileprefix, filename)]:
        try:
            f = open(fpath, 'r')
            break
        except OSError:
            continue
    else:
        raise Exception('could not find file %s to plot' % filename)

    line = f.readline()
    createtime = line.strip()[-19:]
    title = '%s %s' % (path.basename(filename), createtime)
    tasopmode = ''
    scanconst = 0
    subtitle = ''

    while not line.startswith('### Scan data'):
        if not line.startswith('###'):
            name, value = line[1:].split(':', 1)
            name = name.strip()
            value = value.strip()
            if name.endswith('_scanmode'):
                tasopmode = value
            elif name.endswith('_scanconstant'):
                scanconst = try_float(value)
            elif name == 'info':
                subtitle = value
        line = f.readline()

    # now come the two header lines
    colnames = f.readline().split()[1:]
    colunits = f.readline().split()[1:]

    # check file format: does it have ';' separated xcols and ycols?
    try:
        ystart = colnames.index(';')
    except ValueError:
        ystart = 0
    else:
        # remove semicolon
        del colnames[ystart]
        try:
            del colunits[ystart]
        except IndexError:
            pass

    # now comes the data
    line = f.readline()
    values = []
    while line and not line.startswith('###'):
        parts = line.split()
        if ystart > 0:
            values.append(map(try_float, parts[:ystart] + parts[ystart + 1:]))
        else:
            values.append(map(try_float, parts))
        line = f.readline()
    f.close()

    # determine X column
    if xcol is None:
        if colnames[0] == 'h':
            # HKL scan: determine first changing column
            if len(values) < 2 and xcolhint is not None:
                xcol = xcolhint
            else:
                diffs = []
                for i in range(min(4, len(values))):
                    diffs.append(abs(values[0][i] - values[1][i]))
                xcol = diffs.index(max(diffs))
        else:
            xcol = 0
    elif isinstance(xcol, str):
        try:
            xcol = colnames.index(xcol)
        except ValueError:
            raise ValueError('X column %r not found' % xcol) from None
    else:
        # 1-based xcols as number
        xcol -= 1

    # determine Y column
    if ycol is None:
        # determine detector: pick the "det" or "ctr" column with the
        # most total counts
        candidates = []
        for i, col in enumerate(colnames[ystart:]):
            idx = i + ystart
            if col.startswith('det') or col.startswith('ctr') or \
                    col.startswith('psd'):
                total = sum(values[j][idx] for j in range(len(values)))
                candidates.append((total, idx))
        candidates.sort()
        if not candidates:
            raise ValueError('no Y column found in file')
        ycol = candidates[-1][1]
    elif isinstance(ycol, str):
        try:
            ycol = colnames[ystart:].index(ycol) + ystart
        except ValueError:
            try:
                ycol = colnames.index(ycol)    # allow using non-intended ycols
            except ValueError:
                raise ValueError('Y column %r not found' % ycol) from None
    else:
        # 1-based ycols: ycol=1 becomes cols[ystart], ycol=2 becomes cols[ystart]
        ycol += ystart - 1

    # determine monitor column
    if normalize:
        candidates = []
        for i, col in enumerate(colnames[ystart:]):
            idx = i + ystart
            if col.startswith('mon'):
                total = sum(values[j][idx] for j in range(len(values)))
                candidates.append((total, idx))
        candidates.sort()
        moncol = candidates[-1][1]
        monname = colnames[moncol]
    else:
        moncol = -1
        monname = ''

    # search temperature
    # also support some legacy stuff whose naming can't be changed easily:
    # mc = mixing chamber of the dilution
    # vti = preecooling of the dilution or the controler of the samplestick
    # sts = samplestick
    for n in 'Ts:avg Ts T:avg T mc:avg mc vti sts sts:avg'.split():
        if n in colnames:
            tcol = colnames.index(n)
            break
        else:  # no match, try unit...
            if 'K' in colunits:
                tcol = colunits.index('K')
            else:
                tcol = -1

    # search field
    if 'B' in colnames:
        bcol = colnames.index('B')
    elif 'T' in colunits:
        bcol = colunits.index('T')
    elif 'I' in colnames:  # driving field in terms of current
        bcol = colnames.index('I')
    else:
        bcol = -1

    # search pressure
    if 'p' in colnames:
        pcol = colnames.index('p')
    elif 'kbar' in colunits:
        pcol = colunits.index('kbar')
    elif 'bar' in colunits:
        pcol = colunits.index('bar')
    elif 'mbar' in colunits:
        pcol = colunits.index('mbar')
    else:
        pcol = -1

    # column for k_i, if correction needed
    if 'mono' in colnames and mcorr:
        kicol = colnames.index('mono')
    else:
        kicol = -1

    try:
        xaxisname = '%s (%s)' % (colnames[xcol], colunits[xcol])
    except IndexError:
        xaxisname = colnames[xcol]
    try:
        if normalize:
            yaxisname = '%s (%s/1e5 %s)' % (colnames[ycol], colunits[ycol],
                                            monname)
        else:
            yaxisname = '%s (%s)' % (colnames[ycol], colunits[ycol])
    except IndexError:
        yaxisname = colnames[ycol]

    if tasopmode.upper() in ('CKI', 'CKF'):
        legend = r'%s %s %4.2f A\S\+-1\N' % (filename[-10:-4], tasopmode,
                                             scanconst)
    else:
        legend = '%s %s %4.2f' % (filename[-10:-4], tasopmode, scanconst)

    xs, ys, dys = [], [], []
    for v in values:
        xs.append(v[xcol])
        yval = v[ycol]
        if normalize:
            scale = 1e5 / v[moncol]
        else:
            scale = 1.0
        if kicol > -1:
            myki = v[kicol]
            fcorr = 0.0478*myki**3 - 0.4747*myki**2 + 1.6149*myki - 0.9704
        else:
            fcorr = 1.0
        ys.append(yval * scale / fcorr)
        # if data = 0 use 1 for errorbar calculation...
        dys.append((1.0 if yval == 0 else sqrt(yval)) * scale / fcorr)

    if tcol > -1:
        temperature = sum(v[tcol] for v in values) / len(values)
        if temperature > 100:
            legend += ' T=%3.0f K' % temperature
        elif temperature > 10:
            legend += ' T=%4.1f K' % temperature
        elif temperature > 2:
            legend += ' T=%5.2f K' % temperature
        elif temperature > 1:
            legend += ' T=%6.3f K' % temperature
        else:
            legend += ' T=%3.0f mK' % (temperature * 1000)

    if bcol > -1:
        field = sum(v[bcol] for v in values) / len(values)
        if abs(field) >= 10:
            legend += ' B=%5.2f %s' % (field, colunits[bcol])
        else:
            legend += ' B=%6.3f %s' % (field, colunits[bcol])

    if pcol > -1:
        pressure = sum(v[pcol] for v in values) / len(values)
        if abs(pressure) >= 10:
            legend += ' p=%5.2f %s' % (pressure, colunits[pcol])
        else:
            legend += ' p=%6.3f %s' % (pressure, colunits[pcol])

    xs = array(xs)
    ys = array(ys)
    dys = array(dys)
    return (xs, ys, dys, title, subtitle, xaxisname, yaxisname, legend, xcol)


# start normal code here
if 'help' in sys.argv:
    print('usage: scanplot prefix filenumber,filenumber,... option... '
          'fitfunction')
    print("""
Available options:
==================
 - fit: tries to fit a fitfunction (default gauss) to each datafile
 - log: plots data on a logarithmic scale
 - sum: adds TWO datfiles together and plot the result
 - diff: plot the difference of TWO datafiles
 - norm: normalizes all datapoints to a monitor of 1e5
 - mcorr: performs monitor correction (for higher harmonics)
 - merge: combines all given datafiles and treats the result as one
 - tcol=<number_or_name>: overides automatic detection of temperature column
 - xcol=<number_or_name>: overides automatic detection of xcolumn
 - ycol=<number_or_name[,another_number_or_name ...]>:
   overrides automatic detection of ycolumn, plots several columns
 - xmin=<number>: overrides automatic detection of xmin
 - xmax, ymin, ymax work in the same way
 - xlim=<min,max>: sets both limits, ylim works analog
 - cascade=<number>: cascades plots by a given y-value
 - help: displays this screen

Available fitfunctions:
=======================
 - g, gauss: a gaussian parameterized with FWHM instead of SIGMA
 - l, lorentz: a lorentzian parameterized with FWHM instead of SIGMA
 - gwl: a lorentzian and a gaussian at the same position
 - gg, gaussgauss: two gaussian with the same width
""")
    sys.exit(1)

numargs = len(sys.argv)
if numargs < 3:
    print('usage: scanplot prefix filenumber,filenumber,... option... '
          'fitfunction')
    print('Hint: try "scanplot help"')
    sys.exit(1)

fileprefix = sys.argv[1]
filelist = sys.argv[2].split(',')

if len(filelist) < 1 or len(filelist) > 9:
    print('error: number of files must be in [1..9]')
    sys.exit(1)
# default is plot only
function = gauss
fitflag = False
normflag = False
sumflag = False
diffflag = False
newxcol = None
newycols = [None]
mergeflag = False
monitorcorrection = False
ymin = None
ymax = None
xmin = None
xmax = None
cascade = None
kwargs={}

for arg in sys.argv:
    if arg[0:4] == 'tcol':
        newtcol = arg.split('=')[1]
        try:
            newtcol = int(newtcol)
        except ValueError:
            pass
        kwargs['tcol'] = newtcol
    elif arg[0:4] == 'xcol':
        newxcol = arg.split('=')[1]
        try:
            newxcol = int(newxcol)
        except ValueError:
            pass
    elif arg[0:4] == 'ycol':
        # add code for multicolumn for polarised mode
        newycols = arg.split('=')[1].split(',') # get stringlist
        for i in range(len(newycols)): # convert element-by-element to int
            try:
                newycols[i] = int(newycols[i])
            except ValueError:
                pass
    elif arg[0:4] == 'xlim':
        newxlims = arg.split('=')[1]
        if ',' in newxlims:
            xmin, xmax = map(float, newxlims.split(','))
        else:
            xmin = 0
            xmax = float(newxlims)
    elif arg[0:4] == 'xmax':
        xmax = float(arg.split('=')[1])
    elif arg[0:4] == 'xmin':
        xmin = float(arg.split('=')[1])
    elif arg[0:4] == 'ylim':
        newylims = arg.split('=')[1]
        if ',' in newylims:
            ymin, ymax = map(float, newylims.split(','))
        else:
            ymin = 0
            ymax = float(newylims)
    elif arg[0:4] == 'ymax':
        ymax = float(arg.split('=')[1])
    elif arg[0:4] == 'ymin':
        ymin = float(arg.split('=')[1])
    elif arg[0:7] == 'cascade':
        cascade = float(arg.split('=')[1])

logflag   = 'log' in sys.argv
mergeflag = 'merge' in sys.argv
fitflag   = 'fit' in sys.argv
sumflag   = 'sum' in sys.argv
diffflag  = 'diff' in sys.argv
if sumflag + diffflag + mergeflag > 1:
    print('illegal option combination: diff / sum / merge')
    sys.exit(1)
normflag = 'norm' in sys.argv
monitorcorrection = 'mcorr' in sys.argv

for fitfunname in fitfunlist:
    if fitfunname in sys.argv:
        function = fitfunlist[fitfunname]

if diffflag:
    if len(filelist) != 2:
        print('must have exactly two filenumbers to build difference plot')
        sys.exit(1)
if sumflag or mergeflag:
    if len(filelist) < 2:
        print('must have at least two files to sum or merge')
        sys.exit(1)

pl = GracePlot.GracePlot().write

# now plot all files:
filecount = 0
lastfilenumber = ''
xcolhint = None
for filenumber in filelist:
    if filenumber.startswith('-'):
        filenumber = lastfilenumber[:-len(filenumber[1:])] + filenumber[1:]
    lastfilenumber = filenumber
    for newycol in newycols:
        filename = fileprefix + '_' + filenumber.zfill(8) + '.dat'
        try:
            thedata = getdatafromfile(filename, fileprefix, newxcol, newycol,
                                      normflag,
                                      monitorcorrection, xcolhint, **kwargs)
        except Exception as err:
            print('Could not read data file %r: %s' % (filename, err))
            sys.exit(1)
        xs, ys, dys, title, subtitle, xaxis, yaxis, legend, xcolhint = thedata
        if logflag:
            yaxis = 'log ' + yaxis
        if filecount == 0:
            prepareplot(pl, title, subtitle, xaxis, yaxis)
            if diffflag or mergeflag:
                combined = [xs, ys, dys]
            elif sumflag:
                combined = [xs, ys, dys**2]
        else:
            if diffflag:
                combined[1] = combined[1] - ys
                combined[2] = sqrt(combined[2]**2 + dys**2)
            elif sumflag:
                combined[1] += ys
                combined[2] += dys**2
            elif mergeflag:
                combined[0] = concatenate((combined[0], xs))
                combined[1] = concatenate((combined[1], ys))
                combined[2] = concatenate((combined[2], dys))

        if not (sumflag or mergeflag):
            curvename = legend
            if len(newycols) > 1:
                curvename = '%s <%s>' % (legend, yaxis)
            plotcurve(pl, xs, ys, dys,
                      filecount, curvename, fitflag, function)

        filecount += 1

if diffflag:
    plotcurve(pl, combined[0], combined[1], combined[2],
              filecount, 'difference', fitflag, function)
if sumflag:
    combined[2] = combined[2]**0.5
    plotcurve(pl, combined[0], combined[1], combined[2],
              0, 'summed data', fitflag, function)
if mergeflag:
    ix = argsort(combined[0])
    plotcurve(pl, combined[0][ix], combined[1][ix], combined[2][ix],
              0, 'merged data', fitflag, function)

pl('autoscale')
pl('redraw')
