#!/usr/bin/env python3

# This is copied to NICOS_TEST_ROOT/bin/nicos-simulate when the tests run.
# It is adapted from bin/nicos-simulate to run correctly in the test
# environment.

import os
import sys
from shutil import which

from test.utils import runtime_root, selfDestructAfter

from nicos import config
from nicos.core.sessions.simulation import SimulationSession
from nicos.protocols.cache import cache_load

try:
    import coverage
except ImportError:
    pass
else:
    # Note: This will only fire up coverage if the COVERAGE_PROCESS_START env
    # variable is set
    coverage.process_startup()


sync_cache_file = None


class TestSimulationSession(SimulationSession):

    def begin_setup(self):
        # do not set log handler to ERROR level, but do generate these:
        from nicos.utils.stubs import generate_stubs
        generate_stubs()

    def simulationSync(self, db=None):
        if sync_cache_file is None:
            return
        db = {}
        with open(sync_cache_file) as fp:
            for line in fp:
                if line.startswith('nicos/'):
                    line = line[6:]
                key, value = line.split('=', 1)
                db[key] = cache_load(value)
        self._simulationSync_applyValues(db)


args = sys.argv[1:]
if len(args) < 5:
    raise SystemExit('Usage: nicos-simulate sock uuid setups user code '
                     '[setup_subdirs [sync_cache_file]]')
sock = args[0]
uuid = args[1]
setups = args[2].split(',')
user = args[3]
code = args[4]

if len(args) > 5:
    setup_subdirs = args[5]
else:
    setup_subdirs = '../test'

if len(args) > 6 and os.path.isfile(args[6]):
    sync_cache_file = args[6]

config.apply()
config.nicos_root = runtime_root
config.setup_subdirs = setup_subdirs

# enable this if the helper is installed
config.sandbox_simulation = bool(which('nicos-sandbox-helper'))

selfDestructAfter(30)
TestSimulationSession.run(sock, uuid, setups, user, code)
